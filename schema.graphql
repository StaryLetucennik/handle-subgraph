type CollateralToken @entity {
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
    mintCollateralRatio: BigInt!
    liquidationFee: BigInt!
    interestRate: BigInt!
    totalBalance: BigInt!
    isValid: Boolean!
    rate: BigInt!
}

type fxToken @entity {
    id: ID!
    name: String!
    symbol: String!
    decimals: Int!
    isValid: Boolean!
    rate: BigInt!
}

type Vault @entity {
    id: ID!
    account: String!
    fxToken: String!
    debt: BigInt!
    collateralTokens: [VaultCollateral!]! @derivedFrom(field: "vault")
    collateralAddresses: [String!]!
}

type VaultRegistry @entity {
    id: ID!
    owners: [String!]!
}

type TokenRegistry @entity {
    id: ID!
    collateralTokens: [String]!
    fxTokens: [String]!
}

type VaultCollateral @entity {
    id: ID!
    vault: Vault!
    address: String!
    amount: BigInt!
}

type fxKeeperPool @entity {
    id: ID!
    fxToken: String!
    totalDeposits: BigInt!
    liquidationsExecuted: BigInt!
    collateralAddresses: [String!]!
}

type pctPool @entity {
    id: ID!
    collateralToken: String!
    totalDeposits: BigInt!
    totalInvestments: BigInt!
    totalClaimable: BigInt!
    depositorCount: BigInt!
    protocolFee: BigInt!
    interfaces: [String!]!
}

type RewardPoolRegistry @entity {
    id: ID!
    poolCount: BigInt!
    totalWeight: BigInt!
    totalForexDistributed: BigInt!
    currentDistributionRatePerSecond: BigInt!
    forexDistributionChange: [ForexDistributionRateChange!]! @derivedFrom(field: "poolRegistry")
}

type ForexDistribution @entity {
    id: ID!
    rewardPool: RewardPool!
    distributionRatePerSecond: BigInt!
    amount: BigInt!
    date: BigInt!
}

type ForexDistributionRateChange @entity {
    id: ID!
    poolRegistry: RewardPoolRegistry!
    date: BigInt!
    ratePerSecond: BigInt!
}

type RewardPool @entity {
    id: ID!
    totalDeposits: BigInt!
    weight: BigInt!
    ratio: BigInt!
    assetAddress: String!
    assetType: BigInt!
    whitelistedStakers: [String!]!
    aliases: [String!]!
    depositors: [RewardPoolDepositor!]! @derivedFrom(field: "rewardPool")
    distributions: [ForexDistribution!]! @derivedFrom(field: "rewardPool")
}

type RewardPoolDepositor @entity {
    id: ID!
    amount: BigInt!
    account: String!
    rewardPool: RewardPool!
    totalClaimed: BigInt!
}

type GovernanceLocker @entity {
    id: ID!
    amount: BigInt!
    lockCreationDate: BigInt!
    lockLastUpdatedDate: BigInt!
    lockEndDate: BigInt!
    updateCount: BigInt!
    withdrawCount: BigInt!
}

type GovernanceLockedSupplyChange @entity {
    id: ID!
    supplyDifference: BigInt!
    date: BigInt!
    triggeredBy: String!
}

type Transform @entity {
    id: ID!
    date: BigInt!
    account: String!
    tokenIn: String!
    tokenOut: String!
    amountIn: BigInt!
    amountOut: BigInt!
}
